<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service.proto

namespace Twitch\Twirp\Example;

use Http\Client\HttpClient;
use Http\Message\MessageFactory;
use Http\Message\StreamFactory;
use Psr\Http\Message\UriInterface;
use Twirp\Context;
use Twirp\Error;

/**
 * A Protobuf client that implements the Haberdasher interface.
 * It communicates using Protobuf and can be configured with a custom HTTP Client.
 *
 * Generated from protobuf service <code>twitch.twirp.example.Haberdasher</code>
 */
final class HaberdasherClient extends TwirpClient implements Haberdasher
{
    /**
     * @var UriInterface
     */
    private $addr;

    /**
     * @param string              $addr
     * @param HttpClient|null     $httpClient
     * @param MessageFactory|null $messageFactory
     * @param StreamFactory|null  $streamFactory
     */
    public function __construct(
        $addr,
        HttpClient $httpClient = null,
        MessageFactory $messageFactory = null,
        StreamFactory $streamFactory = null
    ) {
        parent::__construct($httpClient, $messageFactory, $streamFactory);

        $this->addr = $this->urlBase($addr);
    }

    /**
     * {@inheritdoc}
     *
     * @throws Error
     */
    public function MakeHat(array $ctx, \Twitch\Twirp\Example\Size $in)
    {
        $ctx = Context::withPackageName($ctx, 'twitch.twirp.example');
        $ctx = Context::withServiceName($ctx, 'Haberdasher');
        $ctx = Context::withMethodName($ctx, 'MakeHat');

        $out = new \Twitch\Twirp\Example\Hat();

        $url = (string)$this->addr->withPath('/twirp/twitch.twirp.example.Haberdasher/MakeHat');

        $this->doProtobufRequest($ctx, $url, $in, $out);

        return $out;
    }
}
